spec "SecurityOperationsManager" v2.1 {
  description: "AI-enhanced security operations management platform for metrics, reporting, resource allocation, and strategic planning."

  inputs:
    manager_profile: object {
      manager_id: string { validate: /^SOM[0-9]{3}$/ }
      management_level: enum("team_lead", "operations_manager", "director", "ciso") { default: "operations_manager" }
      experience_years: int { default: 8 }
      team_size: int { default: 15 }
      budget_authority: float { default: 2000000.0, description: "annual budget in USD" }
      reporting_frequency: enum("daily", "weekly", "monthly", "quarterly") { default: "weekly" }
      stakeholder_groups: array<string> { default: ["executive", "board", "audit", "compliance", "business_units"] }
    }
    
    operational_metrics: object {
      sla_targets: object {
        critical_incident_response_minutes: int { default: 15 }
        high_incident_response_minutes: int { default: 60 }
        medium_incident_response_minutes: int { default: 240 }
        alert_triage_minutes: int { default: 30 }
        false_positive_rate_percent: float { default: 5.0 }
        mean_time_to_detection_hours: float { default: 2.0 }
        mean_time_to_containment_hours: float { default: 4.0 }
      }
      performance_indicators: array<object> {
        schema: {
          kpi_name: string,
          target_value: float,
          current_value: float,
          trend: enum("improving", "stable", "declining"),
          measurement_unit: string,
          reporting_frequency: enum("real_time", "daily", "weekly", "monthly")
        }
      }
      team_metrics: object {
        analyst_utilization_target: float { default: 0.75 }
        training_hours_per_quarter: int { default: 40 }
        certification_maintenance_rate: float { default: 0.95 }
        employee_satisfaction_score: float { default: 4.0, description: "out of 5" }
        turnover_rate_annual: float { default: 0.15 }
      }
    }
    
    resource_management: object {
      staffing: object {
        current_headcount: int
        approved_headcount: int
        open_positions: int { default: 0 }
        contractor_count: int { default: 0 }
        skill_gaps: array<string> { default: [] }
      }
      technology_stack: array<object> {
        schema: {
          technology_name: string,
          category: enum("siem", "edr", "ndr", "soar", "threat_intel", "vulnerability_mgmt", "identity", "cloud_security"),
          vendor: string,
          annual_cost: float,
          contract_expiry: string,
          utilization_rate: float,
          effectiveness_score: float
        }
      }
      budget_allocation: object {
        personnel_percent: float { default: 0.60 }
        technology_percent: float { default: 0.30 }
        training_percent: float { default: 0.05 }
        consulting_percent: float { default: 0.05 }
      }
    }
    
    ai_models: object {
      performance_analyzer: string { default: "performance_analysis_v3.5" }
      trend_predictor: string { default: "trend_prediction_v2.7" }
      resource_optimizer: string { default: "resource_optimization_v4.2" }
      risk_assessor: string { default: "operational_risk_v2.9" }
      report_generator: string { default: "executive_reporting_v1.8" }
      budget_forecaster: string { default: "budget_forecasting_v2.3" }
    }
    
    governance_framework: object {
      compliance_requirements: array<string> { default: ["sox", "pci_dss", "iso27001", "nist_csf", "gdpr"] }
      audit_schedule: array<object> {
        schema: {
          audit_type: enum("internal", "external", "regulatory", "vendor"),
          frequency: enum("annual", "semi_annual", "quarterly"),
          next_due_date: string,
          scope: array<string>
        }
      }
      risk_tolerance: object {
        operational_risk_threshold: float { default: 0.3 }
        financial_risk_threshold: float { default: 100000.0 }
        reputational_risk_threshold: float { default: 0.2 }
        regulatory_risk_threshold: float { default: 0.1 }
      }
    }

  computed:
    operational_health: -> {
      let sla_compliance = calculate_sla_compliance(operational_metrics.sla_targets)
      let team_performance = assess_team_performance(operational_metrics.team_metrics)
      let resource_efficiency = calculate_resource_efficiency(resource_management)
      
      return {
        overall_score: (sla_compliance.score + team_performance.score + resource_efficiency.score) / 3,
        sla_compliance: sla_compliance,
        team_performance: team_performance,
        resource_efficiency: resource_efficiency,
        critical_issues: identify_critical_issues(sla_compliance, team_performance, resource_efficiency)
      }
    }
    
    budget_status: -> {
      let current_spend = calculate_current_spend(resource_management)
      let projected_annual = project_annual_spend(current_spend)
      let variance = (projected_annual - manager_profile.budget_authority) / manager_profile.budget_authority
      
      return {
        annual_budget: manager_profile.budget_authority,
        projected_spend: projected_annual,
        variance_percent: variance * 100,
        over_budget: variance > 0,
        remaining_budget: manager_profile.budget_authority - current_spend.ytd_total,
        burn_rate: current_spend.monthly_average
      }
    }
    
    strategic_insights: -> mcp.call("ai.generate_strategic_insights", {
      operational_data: operational_health,
      budget_data: budget_status,
      market_trends: get_industry_trends(),
      threat_landscape: get_threat_landscape_summary(),
      model: ai_models.trend_predictor
    })

  events:
    on_sla_breach(breach_event): {
      // Handle SLA breaches and performance issues
      let breach_analysis = mcp.call("ai.analyze_sla_breach", {
        breach: breach_event,
        historical_data: get_sla_history(breach_event.sla_type, 90),
        model: ai_models.performance_analyzer,
        context: {
          current_workload: get_team_workload(),
          resource_constraints: get_resource_constraints(),
          recent_changes: get_recent_operational_changes()
        }
      })
      
      if breach_analysis.systemic_issue {
        let improvement_plan = mcp.call("ai.generate_improvement_plan", {
          breach_analysis: breach_analysis,
          available_resources: resource_management,
          model: ai_models.resource_optimizer,
          constraints: {
            budget_limit: budget_status.remaining_budget,
            timeline: breach_event.resolution_deadline
          }
        })
        
        actions.implement_improvement_plan(improvement_plan)
        actions.notify_stakeholders("sla_breach_response", {
          breach: breach_event,
          analysis: breach_analysis,
          response_plan: improvement_plan
        })
        
        if breach_analysis.severity == "critical" {
          actions.escalate_to_executive_team(breach_event, breach_analysis)
        }
      }
      
      actions.update_performance_dashboard(breach_event, breach_analysis)
      actions.schedule_follow_up_review(breach_event.sla_type, breach_analysis.recommended_review_date)
    }
    
    on_budget_variance_alert(variance_event): {
      // Handle budget variance and financial planning
      let variance_analysis = mcp.call("ai.analyze_budget_variance", {
        variance: variance_event,
        budget_breakdown: resource_management.budget_allocation,
        model: ai_models.budget_forecaster,
        context: {
          seasonal_patterns: get_seasonal_spending_patterns(),
          upcoming_projects: get_planned_projects(),
          market_conditions: get_market_cost_trends()
        }
      })
      
      if variance_analysis.action_required {
        let budget_adjustment = mcp.call("ai.recommend_budget_adjustments", {
          variance_analysis: variance_analysis,
          available_options: get_budget_adjustment_options(),
          model: ai_models.resource_optimizer,
          priorities: manager_profile.stakeholder_groups
        })
        
        actions.prepare_budget_adjustment_proposal(budget_adjustment)
        
        if variance_analysis.severity == "high" {
          actions.request_emergency_budget_review(variance_event, variance_analysis)
        }
      }
      
      actions.update_financial_forecasts(variance_analysis)
      actions.notify_finance_team("budget_variance", variance_analysis)
    }
    
    on_performance_review_cycle(review_event): {
      // Handle periodic performance reviews and strategic planning
      let performance_assessment = mcp.call("ai.conduct_performance_assessment", {
        review_period: review_event.period,
        metrics: operational_metrics.performance_indicators,
        model: ai_models.performance_analyzer,
        benchmarks: get_industry_benchmarks(),
        historical_trends: get_performance_trends(review_event.period)
      })
      
      let strategic_recommendations = mcp.call("ai.generate_strategic_recommendations", {
        performance: performance_assessment,
        market_analysis: get_market_analysis(),
        threat_forecast: get_threat_forecast(),
        model: ai_models.trend_predictor,
        planning_horizon: review_event.planning_horizon || "12_months"
      })
      
      let executive_report = actions.compile_executive_report({
        period: review_event.period,
        performance: performance_assessment,
        recommendations: strategic_recommendations,
        budget_status: budget_status,
        operational_health: operational_health
      })
      
      actions.schedule_stakeholder_presentations(executive_report, manager_profile.stakeholder_groups)
      actions.update_strategic_roadmap(strategic_recommendations)
      
      if performance_assessment.major_gaps_identified {
        actions.initiate_improvement_initiatives(performance_assessment.improvement_areas)
      }
    }
    
    on_resource_constraint(constraint_event): {
      // Handle resource constraints and optimization opportunities
      let constraint_analysis = mcp.call("ai.analyze_resource_constraints", {
        constraint: constraint_event,
        current_allocation: resource_management,
        model: ai_models.resource_optimizer,
        context: {
          workload_forecast: get_workload_forecast(),
          skill_requirements: get_skill_requirements(),
          technology_roadmap: get_technology_roadmap()
        }
      })
      
      if constraint_analysis.optimization_potential {
        let optimization_plan = mcp.call("ai.optimize_resource_allocation", {
          constraints: constraint_analysis,
          available_options: get_resource_options(),
          model: ai_models.resource_optimizer,
          objectives: ["efficiency", "effectiveness", "cost_control", "risk_mitigation"]
        })
        
        actions.evaluate_optimization_options(optimization_plan)
        
        if optimization_plan.requires_approval {
          actions.prepare_resource_request(optimization_plan)
          actions.present_to_leadership("resource_optimization", optimization_plan)
        } else {
          actions.implement_resource_optimization(optimization_plan)
        }
      }
      
      actions.update_capacity_planning(constraint_analysis)
    }
    
    on_compliance_deadline(compliance_event): {
      // Handle compliance deadlines and audit preparations
      let compliance_assessment = mcp.call("ai.assess_compliance_readiness", {
        requirement: compliance_event.requirement,
        current_state: get_compliance_status(compliance_event.requirement),
        model: ai_models.risk_assessor,
        deadline: compliance_event.deadline
      })
      
      if compliance_assessment.gaps_identified {
        let remediation_plan = mcp.call("ai.generate_remediation_plan", {
          gaps: compliance_assessment.gaps,
          deadline: compliance_event.deadline,
          available_resources: resource_management,
          model: ai_models.resource_optimizer
        })
        
        actions.implement_compliance_remediation(remediation_plan)
        actions.assign_compliance_tasks(remediation_plan.tasks)
        
        if compliance_assessment.risk_level == "high" {
          actions.escalate_compliance_risk(compliance_event, compliance_assessment)
        }
      }
      
      actions.schedule_compliance_review(compliance_event.requirement, compliance_assessment)
      actions.update_compliance_dashboard(compliance_event, compliance_assessment)
    }

  actions:
    implement_improvement_plan(plan: object) -> {
      let implementation = create_improvement_implementation({
        plan: plan,
        manager: manager_profile.manager_id,
        start_date: now(),
        estimated_completion: calculate_completion_date(plan.timeline),
        budget_impact: plan.budget_requirements,
        resource_requirements: plan.resource_needs
      })
      
      assign_improvement_tasks(plan.tasks, get_available_team_members())
      track_implementation_progress(implementation.id)
      
      log_audit_event("improvement_plan_implemented", implementation.id, manager_profile.manager_id)
      return implementation
    }
    
    compile_executive_report(report_data: object) -> {
      let executive_report = create_executive_report({
        period: report_data.period,
        performance_summary: report_data.performance,
        strategic_recommendations: report_data.recommendations,
        financial_status: report_data.budget_status,
        operational_metrics: report_data.operational_health,
        manager: manager_profile.manager_id,
        generated_at: now(),
        classification: "confidential"
      })
      
      format_for_stakeholders(executive_report, manager_profile.stakeholder_groups)
      store_executive_report(executive_report)
      
      return executive_report
    }
    
    prepare_budget_adjustment_proposal(adjustment: object) -> {
      let proposal = create_budget_proposal({
        adjustment_type: adjustment.type,
        requested_amount: adjustment.amount,
        justification: adjustment.business_case,
        impact_analysis: adjustment.impact,
        timeline: adjustment.implementation_timeline,
        manager: manager_profile.manager_id,
        created_at: now()
      })
      
      attach_supporting_documentation(proposal.id, adjustment.supporting_data)
      route_for_approval(proposal, get_approval_chain(adjustment.amount))
      
      return proposal
    }
    
    schedule_stakeholder_presentations(report: object, stakeholders: array<string>) -> {
      let presentations = []
      for stakeholder in stakeholders {
        let presentation = schedule_presentation({
          stakeholder_group: stakeholder,
          report_id: report.id,
          presenter: manager_profile.manager_id,
          format: get_preferred_format(stakeholder),
          duration: get_standard_duration(stakeholder),
          scheduled_date: calculate_presentation_date(stakeholder)
        })
        presentations = append(presentations, presentation)
      }
      
      prepare_presentation_materials(presentations)
      send_calendar_invitations(presentations)
      
      return presentations
    }
    
    evaluate_optimization_options(optimization: object) -> {
      let evaluation = conduct_option_evaluation({
        options: optimization.options,
        criteria: ["cost_benefit", "risk_impact", "implementation_complexity", "strategic_alignment"],
        weights: get_evaluation_weights(manager_profile.management_level),
        evaluator: manager_profile.manager_id
      })
      
      rank_options(evaluation)
      document_evaluation_rationale(evaluation)
      
      return evaluation
    }
    
    update_strategic_roadmap(recommendations: object) -> {
      let roadmap_updates = process_strategic_recommendations({
        recommendations: recommendations,
        current_roadmap: get_current_roadmap(),
        planning_horizon: "24_months",
        manager: manager_profile.manager_id
      })
      
      update_roadmap_database(roadmap_updates)
      notify_planning_team("roadmap_updated", roadmap_updates)
      
      return roadmap_updates
    }

  constraints:
    assert manager_profile.team_size > 0
    assert manager_profile.budget_authority > 0
    assert manager_profile.experience_years >= 0
    ensure operational_metrics.sla_targets.critical_incident_response_minutes > 0
    ensure operational_metrics.sla_targets.false_positive_rate_percent >= 0
    ensure operational_metrics.sla_targets.false_positive_rate_percent <= 100
    
    // Budget constraints
    assert resource_management.budget_allocation.personnel_percent + 
           resource_management.budget_allocation.technology_percent + 
           resource_management.budget_allocation.training_percent + 
           resource_management.budget_allocation.consulting_percent <= 1.0
    
    // Team constraints
    ensure operational_metrics.team_metrics.analyst_utilization_target <= 1.0
    ensure operational_metrics.team_metrics.certification_maintenance_rate <= 1.0
    ensure operational_metrics.team_metrics.turnover_rate_annual >= 0
    
    // Risk constraints
    ensure governance_framework.risk_tolerance.operational_risk_threshold <= 1.0
    ensure governance_framework.risk_tolerance.reputational_risk_threshold <= 1.0
    ensure governance_framework.risk_tolerance.regulatory_risk_threshold <= 1.0

  lifecycle:
    on_start: {
      actions.initialize_management_dashboard(manager_profile)
      actions.sync_performance_metrics()
      actions.validate_budget_allocations()
      actions.load_active_initiatives()
      log_audit_event("management_session_started", manager_profile.manager_id)
    }
    
    on_period_end: {
      actions.generate_period_summary()
      actions.update_performance_baselines()
      actions.archive_completed_initiatives()
      actions.prepare_next_period_planning()
      log_audit_event("management_period_ended", manager_profile.manager_id)
    }
    
    on_error: {
      actions.preserve_management_state()
      actions.escalate_system_failure()
      actions.activate_backup_procedures()
      notify_executive_team("management_system_error", error_details)
    }

  extensions:
    use "mcp" {
      endpoints: ["ai.generate_strategic_insights", "ai.analyze_sla_breach", "ai.generate_improvement_plan",
                 "ai.analyze_budget_variance", "ai.recommend_budget_adjustments", "ai.conduct_performance_assessment",
                 "ai.generate_strategic_recommendations", "ai.analyze_resource_constraints", "ai.optimize_resource_allocation",
                 "ai.assess_compliance_readiness", "ai.generate_remediation_plan"]
    }
    
    use "performance_management" {
      metrics: operational_metrics.performance_indicators
      sla_tracking: true
      trend_analysis: true
    }
    
    use "financial_management" {
      budget_tracking: true
      variance_analysis: true
      forecasting: true
    }
    
    use "compliance_management" {
      frameworks: governance_framework.compliance_requirements
      audit_tracking: true
      risk_assessment: true
    }
}
