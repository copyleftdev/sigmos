spec "AIContentPipeline" v1.0.0 {
    description: "AI-powered content generation and processing pipeline"
    
    // Input parameters
    input topic: String {
        description: "Main topic for content generation"
        required: true
        min_length: 3
    }
    
    input content_type: String = "blog_post" {
        description: "Type of content to generate"
        enum: ["blog_post", "social_media", "email", "documentation"]
    }
    
    input target_audience: String = "general" {
        description: "Target audience for the content"
        enum: ["general", "technical", "business", "academic"]
    }
    
    input word_count: Number = 500 {
        description: "Desired word count for the content"
        min: 100
        max: 2000
    }
    
    input tone: String = "professional" {
        description: "Tone of voice for the content"
        enum: ["professional", "casual", "friendly", "authoritative", "creative"]
    }
    
    // Computed fields for AI processing
    computed content_prompt: String = `
Create a ${content_type} about "${topic}" with the following specifications:
- Target audience: ${target_audience}
- Word count: approximately ${word_count} words
- Tone: ${tone}
- Include relevant examples and actionable insights
- Ensure the content is engaging and well-structured
    `
    
    computed seo_keywords: Array = mcp.analyze(topic, {
        task: "keyword_extraction",
        count: 10,
        include_long_tail: true
    }).keywords
    
    computed content_outline: Object = mcp.complete(
        "Create a detailed outline for: " + content_prompt,
        {
            model: "gpt-4",
            max_tokens: 300,
            temperature: 0.7
        }
    )
    
    computed main_content: String = mcp.complete(content_prompt, {
        model: "gpt-4",
        max_tokens: word_count * 2,
        temperature: 0.8
    }).text
    
    computed content_analysis: Object = mcp.analyze(main_content, {
        task: "content_quality",
        metrics: ["readability", "engagement", "seo_score", "sentiment"]
    })
    
    computed readability_score: Number = content_analysis.readability
    computed engagement_score: Number = content_analysis.engagement
    computed seo_score: Number = content_analysis.seo_score
    
    computed content_improvements: Array = readability_score < 70 || 
                                         engagement_score < 60 || 
                                         seo_score < 50
        ? mcp.complete(
            "Suggest improvements for this content: " + main_content,
            { max_tokens: 200 }
          ).suggestions
        : []
    
    computed final_content: String = len(content_improvements) > 0
        ? mcp.complete(
            "Improve this content based on these suggestions: " + 
            content_improvements.join(", ") + "\n\nContent: " + main_content,
            { max_tokens: word_count * 2 }
          ).text
        : main_content
    
    computed meta_description: String = mcp.complete(
        "Create a compelling 150-character meta description for: " + topic,
        { max_tokens: 50 }
    ).text
    
    computed social_media_posts: Object = {
        "twitter": mcp.complete(
            "Create a Twitter post (280 chars) about: " + topic,
            { max_tokens: 50 }
        ).text,
        "linkedin": mcp.complete(
            "Create a LinkedIn post about: " + topic,
            { max_tokens: 100 }
        ).text,
        "facebook": mcp.complete(
            "Create a Facebook post about: " + topic,
            { max_tokens: 80 }
        ).text
    }
    
    computed content_package: Object = {
        "id": generate_uuid(),
        "topic": topic,
        "type": content_type,
        "audience": target_audience,
        "word_count": len(final_content.split(" ")),
        "outline": content_outline,
        "content": final_content,
        "meta_description": meta_description,
        "keywords": seo_keywords,
        "quality_scores": {
            "readability": readability_score,
            "engagement": engagement_score,
            "seo": seo_score
        },
        "social_media": social_media_posts,
        "improvements_applied": len(content_improvements),
        "created_at": now(),
        "status": "ready"
    }
    
    // Events for pipeline processing
    event onCreate(content_package) {
        log("Content generation started for topic: ${topic}")
        
        // Save to content management system
        rest.post("/api/content", content_package)
        
        // Generate images if needed
        if (content_type == "blog_post" || content_type == "social_media") {
            rest.post("/api/images/generate", {
                prompt: "Create an image for: " + topic,
                style: "professional",
                content_id: content_package.id
            })
        }
        
        // Schedule social media posts
        rest.post("/api/social/schedule", {
            content_id: content_package.id,
            posts: social_media_posts,
            schedule_time: "optimal"
        })
    }
    
    event onUpdate(content_package) {
        log("Content updated: ${content_package.id}")
        
        // Update in CMS
        rest.put("/api/content/${content_package.id}", content_package)
        
        // Regenerate social media if content changed significantly
        if (content_package.improvements_applied > 0) {
            rest.post("/api/social/regenerate", {
                content_id: content_package.id,
                new_content: content_package.content
            })
        }
    }
    
    event onError(error) {
        log("Content pipeline error: ${error.message}")
        
        // Notify content team
        rest.post("/api/notifications", {
            type: "content_error",
            topic: topic,
            error: error.message,
            priority: "high"
        })
        
        // Fallback to template-based content
        rest.post("/api/content/fallback", {
            topic: topic,
            type: content_type,
            reason: "ai_generation_failed"
        })
    }
    
    // Quality constraints
    constraint {
        assert: len(topic) >= 3
        message: "Topic must be at least 3 characters long"
    }
    
    constraint {
        assert: word_count >= 100 && word_count <= 2000
        message: "Word count must be between 100 and 2000"
    }
    
    constraint {
        ensure: len(final_content) > 0
        message: "Content generation must produce output"
    }
    
    constraint {
        ensure: readability_score >= 50
        message: "Content must meet minimum readability standards"
    }
    
    constraint {
        ensure: len(seo_keywords) >= 3
        message: "Must generate at least 3 SEO keywords"
    }
    
    // Lifecycle management
    lifecycle before {
        log("Initializing AI content pipeline for: ${topic}")
        
        // Check AI service availability
        rest.get("/api/ai/health")
        
        // Validate content guidelines
        rest.get("/api/content/guidelines", {
            type: content_type,
            audience: target_audience
        })
        
        // Check for existing content on similar topics
        rest.get("/api/content/search", {
            query: topic,
            similarity_threshold: 0.8
        })
    }
    
    lifecycle after {
        log("Content pipeline completed for: ${topic}")
        
        // Update content analytics
        rest.post("/api/analytics/content", {
            topic: topic,
            type: content_type,
            quality_scores: content_package.quality_scores,
            processing_time: elapsed_time()
        })
        
        // Clean up temporary AI resources
        cleanup_ai_resources()
        
        // Trigger content review workflow if quality scores are low
        if (readability_score < 60 || engagement_score < 50) {
            rest.post("/api/workflows/review", {
                content_id: content_package.id,
                reason: "quality_review_needed"
            })
        }
    }
}
